<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

   <!-- 
     fileUpload.jsp -> FileController.java
     return 파일 경로 정보
         일반 파일: c:\upload\2022\12
         이미지 파일: C:\DCOM_0725\06_Spring\WorkSpace\SW_SH22_01\src\main\webapp\resources\upload\2022\12
         이미지 업로드 경로 : WorkSpace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0
     
     1. 파일 rename : YYYYMMDD_UUID
     2. 이미지파일: 썸네일
     
     maxUploadsize: 최대 업로드 가능한 바이트 크기. -1은 제한이 없음을 의미. 기본값: -1
     defaultEncoding: 요청을 파싱할 때 사용할 캐릭터 인코딩. 지정하지 않을 경우, 
     maxInMemorySize: 디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기. 기본값은 1024바이트
    -->
   <!-- 파일 업로드 -->
   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
     <property name="defaultEncoding" value="UTF-8"/>
     <property name="maxUploadSize" value="52428800"/>
     <property name="maxInMemorySize" value="52428800"/>
   </bean>

	<!-- mybatis 설정 -->
	<!-- mybatis db연결 객체 생성 -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<!-- xml mybatis설정 파일 읽기 -->
		<constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
	<!-- xml mybatis설정 파일 읽기: 환경설정 파일 읽기 mybatis-config.xml mapper: mapper/**/*.xml -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="mapperLocations"
			value="classpath:mapper/**/*.xml" />
	</bean>

	<!-- tx:어드바이스 쓰려면 이거 필요함 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 트랜잭션 어드바이스 지금까지는 Adivce를 직접 구현 했었다. 하지만 트랜잭션 관리 기능의 어드바이스는 직접 구현하지 
		않는다. 스프링 컨테이너가 <tx:advice 설정을 참조하여 자동으로 생성한다. -->
	<!-- 트랜잭션 처리해야되는 메서드 생기면 밑에 프로퍼티에 추가하세요 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- do*로 시작하는 메서드는 트랜잭션관리 대상에서 제외 -->
			<tx:method name="do*" read-only="true" />
			<!-- up*시작하는 메서드는 트랜잭션 관리 대상이다. -->
			<tx:method name="up*" read-only="false"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- pointcut+adice = adviser * com.pcwk.ehr.업무.service.*Impl.up*(..) -->
	<aop:config>
		<aop:pointcut
			expression="execution(* com.pcwk.ehr..service.*Impl.*(..))"
			id="txPointCut" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txPointCut" />
	</aop:config>

	<!-- database.properties read -->
	<context:property-placeholder
		location="classpath:/resource/config/database.properties" />

	<!--SimpleDriverDataSource to -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="url"
			value="jdbc:log4jdbc:oracle:thin:@192.168.3.101:1521:XE" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 최대 접속 허용 갯수 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 여분으로 남결질 Connection -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- DB연결 대기시간 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- Connection 잘못 관리되어 버려진 연결 찾아 재활용 -->
		<property name="removeAbandoned"
			value="${jdbc.removeAbandoned}" />
		<!-- 버려진 연결로 인식할 기본 시간 -->
		<property name="removeAbandonedTimeout"
			value="${jdbc.removeAbandonedTimeout}" />
	</bean>
</beans>
